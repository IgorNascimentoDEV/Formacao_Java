package br.com.bytebank.banco.modelo;

/**
 * Classe representa a moldura de uma conta
 * @author Igor
 *
 */

public abstract class Conta {
	protected double saldo;
	private int agencia;
	private int numero;
	private Cliente titular;
	private static int total;
	
	
	
	//Construtores

	/**
	 * construtor para inicializar o objeto conta a parte da agencia e numero
	 * 
	 * @param agencia
	 * @param numero
	 */
	public Conta(int agencia, int numero) {
		total++;
		this.agencia = agencia;
		this.numero = numero;
	}
	
	
	//Metodos classe conta
	public abstract void depositar(double valor);
	
	/**
	 * Valor precisar ser maior que o saldo
	 * 
	 * @param valor
	 * @throws SaldoInsuficienteException
	 */
	public void sacar(double valor) throws SaldoInsuficienteException {
		
		if(this.saldo < valor) {
			throw new SaldoInsuficienteException("O Saldo: "+ this.saldo + ", Valor: " + valor);
		}
		this.saldo -= valor;
	}
	
	public void transferir(double valor, Conta destino) throws SaldoInsuficienteException{
		this.sacar(valor);
		destino.depositar(valor);
	}
	
	
	//Metodos acessores
	public double getSaldo() {
		return this.saldo;
	} 
	
	public int getNumero() {
		return this.numero;
	}
	
	public int getAgencia() {
		return agencia;
	}

	public Cliente getTitular() {
		return titular;
	}

	public void setTitular(Cliente titular) {
		this.titular = titular;
	}
	
	public static int getTotal() {
		return Conta.total;
	}
	
	
	//sobrescritas de metodos
	@Override
	public String toString() {
		return "Numero " + this.numero + " Agencia " + this.agencia;
	}
	
	@Override
	public boolean equals(Object obj) {
		Conta outra = (Conta) obj;
		
		if(this.agencia != outra.agencia) {
			return false;
		}else if(this.numero != outra.numero) {
			return false;
		}
		
		return true;
	}



	
}
